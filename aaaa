RxJava 五种“生产者”的区别：

Observable ，可多次发送事件，直到 onComplete 或 onError 被调用结束订阅。
Flowable ，和 Observable 一样。并且可以处理背压（下游处理速度比上游发送速度要慢）。
Single ，单次发送事件（onSuccess、onError），发完即结束订阅。
Completable ，单次发送事件（onError、onComplete），发完即结束订阅。
Maybe ，单次发送事件（onSuccess、onError、onComplete），发完即结束订阅。相当于 Completable 和 Single 结合。

RxJava 的整体结构是一条链，其中:
1. 链的最上游:生产者 Observable
2. 链的最下游:观察者 Observer


根据五种“生产者”的特性，合理的场景使用：

Single:
当请求接口，需要处理接口返回结果内容的时候。

例如：获取用户信息，请求接口后需要拿到用户的信息展示。

Completable:
当请求接口，并不需要关心返回结果时。

例如：数据打点，APP在交互期间，不应该被打点逻辑影响到，也不需要关心数据打点的结果。

Maybe:
相当于上面 Completable 与 Single 的结合体。考虑场景使用即可。

Observable:
当消费者需要处理生产者多次事件时。

例如：TCP 长连接；需要逐个处理列表数据时。

Flowable:
都可以做到 Observable 。并且支持背压。

例如：下载大文件，可能网络传输速度比本地写入快时。

总结：

一般来说，我们一个接口，只是一次请求一次返回，所以我们通常使用 Single 与 Retrofit 是更为合理。

即使返回结果需要再次处理，也可以使用操作符在各种“生产者”之间相互转换（toSingle、toObservable、toFlowable、toMaybe、toCompletable），使用对应的操作符。



------------------------------------
我查了下资料，这些构造一个Rxjava流的的差别就在于其中的Emitter不一样，其中emitter负责串联上下游流。

举个例子Observable可以发送多个数据源，还有就是必须要有一个complete，否则不会取消。

Flowable则不一样，负责处理背压情况，背压出现在输入流的输入速度远远大于接受流的处理速度，这种时候就要有类似线程池内的异常Handler处理。

而Single 则因为Emitter只需要发射一个Next就可以继续向下执行了，而不需要像Observable一样可以多次调用next，最后需要执行complete。

其中还有一种Completableis 基本和Single一样，只是emitter只需要发射complete方法就行了。

最后Maybe 则像是一种single和Completableis的结合体，他的next方法允许发射一个null或者一个对象。


RxJava中Observable、Flowable、Single、Maybe 

https://www.jianshu.com/p/7785c0bf9e17

https://www.jianshu.com/p/45309538ad94




